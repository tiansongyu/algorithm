###题目解释
给定一个非空二叉树, 返回一个由每层节点平均值组成的数组。

 

示例 1：

输入：
    3
   / \
  9  20
    /  \
   15   7
输出：[3, 14.5, 11]
解释：
第 0 层的平均值是 3 ,  第1层是 14.5 , 第2层是 11 。因此返回 [3, 14.5, 11] 。

### 解题思路
记录层次深度
递归
内存占用可优化
### 代码

```cpp
class Solution {
public:
	vector<double> averageOfLevels(TreeNode* root) {
		search(root, 0);
		for (int i = 1; i <= max_depth; i++)
		{
			arg.push_back(sum[i] / number[i]);
		}
		return arg;
	}
	void search(TreeNode* root,int depth)
	{
		depth++;
		max_depth = depth > max_depth ? depth : max_depth;
		//cout << "depth:" << depth <<"";
		//cout << "val:" << root->val << endl;
		sum[depth] += root->val;
		number[depth]++;
		if (root->left != NULL)
		{
			search(root->left, depth);
		}
		if (root->right != NULL)
		{
			search(root->right, depth);
		}
	}
private:
	vector<double>sum = vector<double>(8880, 0);
	vector<int>number = vector<int>(8880, 0);
	vector<double> arg;
	int max_depth = 0;
};
```
